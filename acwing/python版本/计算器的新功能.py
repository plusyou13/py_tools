'''
计算器的新功能

题目描述
当你学一些可视化程序设计语言时，老师经常会让你设计并且编程做出一个计算器，这时也许你会仿照windows系统自带的计算器外观和功能去设计，
但是现在老师要你多做出一个有新功能的计算器，实现当输入一个数时，能够将这个数分解成一个或多个素因子乘积的形式，
并按素因子的大小排列显示出来。大家对计算器中数的表示应该很清楚的。下面显示出了0 — 9这十个数字的表示形式。每个数字都占据5 * 3大小的字符区域


你能实现这个新功能吗？试试看吧！
输入
输入有多组测试数据，每组包括一个正整数n（1 < n <= 1000000)。

样例输入
10

2

输出
对于每个数，将它分解成若干个素数乘积的形式，并按从小到大的顺序输出，素因子之间用“ * ”的形式连接。

样例输出
 -     -

  |   |

 -  *  -

|       |

 -     -



 -

  |

 -

|

 -
'''

"""
解题思路
处理输出函数
    传入list，五行分别处理
        根据传入的list元素，进行选择输出
生成因素，排序生成list
"""
import math


def getPrimeFactorList(n):
    factors = []
    for i in range(2, int(math.sqrt(n)) + 1):
        while n % i == 0:
            factors.append(i)
            n //= i
    if n != 0 and n != 1:
        factors.append(n)
    return factors


def printNum(clist):
    # 5*3
    matrix0 = [[' ', '-', ' '],
               ['|', ' ', '|'],
               [' ', ' ', ' '],
               ['|', ' ', '|'],
               [' ', '-', ' ']]
    matrix1 = [[' ', ' ', ' '],
               [' ', '|', ' '],
               [' ', ' ', ' '],
               [' ', '|', ' '],
               [' ', ' ', ' ']]
    matrix2 = [[' ', '-', ' '],
               [' ', ' ', '|'],
               [' ', '-', ' '],
               ['|', ' ', ' '],
               [' ', '-', ' ']]
    matrix3 = [[' ', '-', ' '],
               [' ', ' ', '|'],
               [' ', '-', ' '],
               [' ', ' ', '|'],
               [' ', '-', ' ']]
    matrix4 = [[' ', ' ', ' '],
               ['|', ' ', '|'],
               [' ', '-', ' '],
               [' ', ' ', '|'],
               [' ', ' ', ' ']]
    matrix5 = [[' ', '-', ' '],
               ['|', ' ', ' '],
               [' ', '-', ' '],
               [' ', ' ', '|'],
               [' ', '-', ' ']]
    matrix6 = [[' ', '-', ' '],
               ['|', ' ', ' '],
               [' ', '-', ' '],
               ['|', ' ', '|'],
               [' ', '-', ' ']]
    matrix7 = [[' ', '-', ' '],
               [' ', ' ', '|'],
               [' ', ' ', ' '],
               [' ', ' ', '|'],
               [' ', ' ', ' ']]
    matrix8 = [[' ', '-', ' '],
               ['|', ' ', '|'],
               [' ', '-', ' '],
               ['|', ' ', '|'],
               [' ', '-', ' ']]
    matrix9 = [[' ', '-', ' '],
               ['|', ' ', '|'],
               [' ', '-', ' '],
               [' ', ' ', '|'],
               [' ', '-', ' ']]
    matrix_star = [[' ', ' ', ' '],
                   [' ', ' ', ' '],
                   [' ', '*', ' '],
                   [' ', ' ', ' '],
                   [' ', ' ', ' ']]
    digitMap = {}
    for i in range(10):
        digitMap[str(i)] = eval("matrix" + str(i))
    digitMap['*'] = matrix_star

    row1 = ''
    row2 = ''
    row3 = ''
    row4 = ''
    row5 = ''

    res = "*".join([str(i) for i in clist])
    for num in res:
        row1 += "".join(digitMap[num][0])
        row2 += "".join(digitMap[num][1])
        row3 += "".join(digitMap[num][2])
        row4 += "".join(digitMap[num][3])
        row5 += "".join(digitMap[num][4])

    print("%s\n%s\n%s\n%s\n%s\n" % (row1, row2, row3, row4, row5))


while 1:
    n = int(input().strip())
    factorList = getPrimeFactorList(n)
    printNum(factorList)
'''
191. 位1的个数
编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。

提示：
请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。

进阶：
如果多次调用这个函数，你将如何优化你的算法？

示例 1：
输入：00000000000000000000000000001011
输出：3
解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
示例 2：
输入：00000000000000000000000010000000
输出：1
解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
示例 3：
输入：11111111111111111111111111111101
输出：31
解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
'''

class Solution:
    # 通过普通整数转为二进制
    def hammingWeight0(self, n: int) -> int:
        return bin(n).count('1')

    # 位移
    # 累加二进制的最后一位，并将二进制右移直到n为0，操作次数为二进制的位数
    def hammingWeight1(self, n: int) -> int:
        res=0
        while n:
            res+=n&1
            n>>=1
        return res


    # 二进制中最低位的1会通过n-1操作消失，而比最低位1高的位不变，通过n&=n-1保留剩余高位的1及低位的0；
    # 示例：n=12，其二进制为1100，n-1为1011，n&(n-1)为1000，消掉了最低位的1...操作次数为二进制中1的个数
    def hammingWeight2(self, n: int) -> int:
        res=0
        while n:
            n&=n-1
            res+=1
        return res



if __name__ == '__main__':
    s=Solution()
    a=s.hammingWeight2(11)
    print(a)